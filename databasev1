#!/usr/bin/env python

import sqlite3
import sys
class database:
    def __init__(self,**kwargs):
        '''This is the constructor of the class
        database it takes dictionary as argument 
        and set the filename and table'''
        self.filename = kwargs['filename']
        self.table = kwargs['table']
    
    def create_database(self):
        ''' This creates a database connection'''
        self.db = sqlite3.connect(self.filename)
        self.db.row_factory = sqlite3.Row
    
    def sql_noparam(self,query):
        '''This method is user to run non select queries
        which do not return anything and doesnot take parameters'''
        self.db.execute(query)
        self.db.commit()
    
    def sql_do(self,query,params):
        '''This method is user to run non select queries
        which do not return anything'''
        self.db.execute(query, params)
        self.db.commit()
        print("done")
    def create_table(self,columns):
        #This method is used for creating table
        self.db.execute('drop table if exists {}'.format(self.table))
        l = len(columns)
        query = 'create table ' + self.table + ' ('
        for key in columns.keys():
            query += key + ' ' + columns[key] + ', '
        query=query[:len(query)-2]
        query+= ' )'
        self.cursor= self.db.execute(query)
    def insert(self,columns):
        listk = sorted(columns.keys())
        listv = [columns[k] for k in listk]
        query = 'insert into {} ({}) values ({})'.format(self.table, ','.join(listk), ','.join('?' for k in range(len(listk))))
        self.db.execute(query,listv)
        self.db.commit()
    def delete(self,id):
        query = 'delete from {} where ROW_ID = ?'.format(self.table)
        self.db.execute(query,(id,))
        self.db.commit()
    def update(self,id,columns):
        try:
            updaterow=self.retrieve_row(id)
            for key in columns.keys():    
                updaterow[key]= columns[key]
            self.delete(id)
            self.insert(updaterow)
        finally:
            self.db.commit()
    def retrieve_row(self,id):
        query = 'select * from {} where ROW_ID = ?'.format(self.table)
        self.cursor = self.db.execute(query,(id,))
        return dict(self.cursor.fetchone())
    def retrieve_rows(self):
        query = 'select * from {}'.format(self.table)
        self.cursor = self.db.execute(query)
        #print("this is where cursor is: {}".format(dict(self.cursor)))
        for self.rows in self.cursor:
            print(dict(self.rows))
        '''This query returns the number of records in the table as a cursor object which 
	will be a tuple with single entry.(due to Row_factory)So I refreneced its 0th element whcih will return a number'''
    def countrecs(self):
        query ='SELECT COUNT(*) FROM {}'.format(self.table)
        self.cursor = self.db.execute(query)
        return self.cursor.fetchone()[0]

''' This is the main program to test this interface performing the basic crud operation'''
def main():
    db = database(filename='test',table='test')
    db.create_database()
    query = 'drop table if exists test'
    db.create_table(dict(ROW_ID= "int", one= "int",two= "int",three="int"))
    db.insert(dict(ROW_ID = 101, one = 1, two = 2,three = 3))
    db.insert(dict(ROW_ID = 102, one = 101, two = 102,three = 103))
    db.insert(dict(ROW_ID = 103, one = 10, two = 20,three = 30))
    db.insert(dict(ROW_ID = 104, one = 400, two = 402,three = 403))
    db.delete(104)
    print(db.retrieve_rows())                
    db.update(102, {"one":10, "two": 20, "three": 300})
    print("table after update")
    print(db.retrieve_rows())
    print("this the one{}".format(db.retrieve_row(101)))
    count = db.countrecs()
    print (count)
#if __name__ == '__main__':main()
